package moshi.blossom.module.impl.exploit;

import moshi.blossom.module.ModManager;
import moshi.blossom.module.ModeHandler;
import moshi.blossom.module.Module;
import moshi.blossom.module.ModuleMode;
import moshi.blossom.module.impl.exploit.disablers.VerusDisabler;
import moshi.blossom.module.impl.exploit.disablers.VulcanDisabler;
import moshi.blossom.option.Option;
import moshi.blossom.option.impl.ModeOption;
import java.util.Objects;

public class Disabler extends Module {

    public final ModeHandler modeHandler;

    public final ModeOption disablerMode;

    public final ModeOption verusMode;

    public Disabler() {
        super("Disabler", "Disabler", Category.EXPLOIT);

        this.modeHandler = new ModeHandler();

        this.disablerMode = createDisablerModeOption();

        this.verusMode = new ModeOption("VERUS_MODE", "Verus Mode", "Null",
    new String[]{"Null", "Null 2", "Spawn", "Latest", "Partial", "Combat", "Stall", "Stall 2", "Stall 3", "Vulcan"});

    modeHandler.setupModes(new ModuleMode[]{new VerusDisabler(), new VulcanDisabler()});

    setupOptions(new Option[]{disablerMode, verusMode});

    }

    private ModeOption createDisablerModeOption() {
    return new ModeOption("MODE", "Mode", "Verus", new String[]{"Verus", "Vulcan"}) {
        @Override
        public void setMode(String newMode) {
            super.setMode(newMode);

            if (Objects.requireNonNull(ModManager.getMod("Disabler")).isToggled()) {
                modeHandler.handle(newMode);

            }

        }

    };

}

@Override
public String getSuffix() {
    return disablerMode.is("verus") ?
    "Verus " + verusMode.getMode() :
    disablerMode.getMode();

}

@Override
public void onEnable() {
    super.onEnable();

    String currentMode = disablerMode.getMode();

    modeHandler.onEnable(currentMode);

    modeHandler.handle(currentMode);

}

@Override
public void onDisable() {
    super.onDisable();

    modeHandler.onDisable(disablerMode.getMode());

}

}
