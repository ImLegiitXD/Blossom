package moshi.blossom.module.impl.exploit.disablers;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import moshi.blossom.event.impl.network.PacketEvent;
import moshi.blossom.event.impl.player.EntityActionEvent;
import moshi.blossom.event.impl.player.MotionEvent;
import moshi.blossom.module.ModManager;
import moshi.blossom.module.ModuleMode;
import moshi.blossom.module.impl.exploit.Disabler;
import moshi.blossom.util.ChatUtil;
import moshi.blossom.util.Clock;
import moshi.blossom.util.network.PacketUtil;
import moshi.blossom.util.network.Packets;
import moshi.blossom.util.network.TimedPacket;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import nevalackin.homoBus.Listener;
import nevalackin.homoBus.annotations.EventLink;

public class VerusDisabler

extends ModuleMode {
    final CopyOnWriteArrayList<TimedPacket> timedBuffer = new CopyOnWriteArrayList();

    final List<Packet<?>> buffer = new ArrayList();

    private final Clock clock = new Clock();

    private boolean disabling = true;

    private int attackTicks = 0;

    @EventLink
    public Listener<MotionEvent> handleMotion = event -> {
        switch (this.mode()) {
            case "stall 2": {
                if (!event.isPre() || ModManager.getMod("Scaffold").isToggled()) break;

                event.force06 = true;

                break;

            }

            case "stall": {
                if (event.isPost()) {
                    return;

                }

                event.force06 = true;

            }

        }

    };

    @EventLink
    public Listener<EntityActionEvent> handleEntity = event -> {
        switch (this.mode()) {
            case "stall 2": {
                if (this.attackTicks == 0) {
                    event.setSprinting(false);

                }

                ++this.attackTicks;

                break;

            }

            case "null 2": {
                if (!ModManager.getMod("Scaffold").isToggled()) break;

                event.setSprinting(false);

                break;

            }

            case "stall 3": {
                if (!ModManager.getMod("Scaffold").isToggled()) break;

                event.setSprinting(this.getPlayer().ticksExisted % 2 == 0);

            }

        }

    };

    @EventLink
    public Listener<PacketEvent> handlePacket = event -> {
        block55: {
            switch (this.mode()) {
                case "spawn": {
                    if (!event.is(Packets.C_CONFIRM_TRANSACTION) || this.getPlayer().ticksExisted >= 320) return;

                    ((C0FPacketConfirmTransaction)event.getPacket()).setUid((short)0);

                    this.buffer.add(event.getPacket());

                    event.cancelEvent();

                    return;

                }

                case "combat": {
                    if (!event.is(Packets.C_CONFIRM_TRANSACTION, Packets.C_KEEP_ALIVE)) return;

                    event.cancelEvent();

                    this.timedBuffer.add(new TimedPacket(event.getPacket()));

                    for (TimedPacket packet : this.timedBuffer) {
                        if (!packet.getClock().elapsed(3500L)) continue;

                        PacketUtil.sendSilent(packet.getPacket());

                        this.timedBuffer.remove(packet);

                    }

                    return;

                }

                case "stall 2": {
                Packets[] clientPackets = new Packets[]{Packets.C_PLAYER, Packets.C_PLAYER_BLOCK_PLACEMENT, Packets.C_PLAYER_DIGGING, Packets.C_ANIMATION, Packets.C_HELD_ITEM_CHANGE, Packets.C_ENTITY_ACTION, Packets.C_USE_ENTITY, Packets.C_CONFIRM_TRANSACTION, Packets.C_KEEP_ALIVE, Packets.C_CLICK_WINDOW, Packets.C_CLIENT_STATUS, Packets.C_CLOSE_WINDOW};

                    if (event.is(Packets.S_RESPAWN)) {
                        this.disabling = true;

                    }

                    if (event.is(Packets.C_USE_ENTITY) && ((C02PacketUseEntity)event.getPacket()).getAction() == C02PacketUseEntity.Action.ATTACK) {
                        this.attackTicks = 0;

                        this.disabling = false;

                    }

                    if (event.isCanceled()) {
                        return;

                    }

                    if (event.is(clientPackets) && !ModManager.getMod("Scaffold").isToggled()) {
                        if (event.is(Packets.C_CONFIRM_TRANSACTION) && this.disabling && this.getPlayer().ticksExisted < 350) {
                            ((C0FPacketConfirmTransaction)event.getPacket()).setUid(this.getPlayer().ticksExisted % 2 == 0 ? (short)Short.MIN_VALUE : Short.MAX_VALUE);

                        }

                        event.cancelEvent();

                        this.buffer.add(event.getPacket());

                    }

                    if (!event.is(Packets.C_PLAYER) || !this.clock.elapsed(150L) && !ModManager.getMod("Scaffold").isToggled()) return;

                    try {
                        this.buffer.forEach(PacketUtil::sendSilent);

                    } catch (Exception ex) {
                        ChatUtil.printDebug("Packet loss?");

                    }

                    this.buffer.clear();

                    this.clock.reset();

                    return;

                }

                case "stall 3": {
                Packets[] clientPackets = new Packets[]{Packets.C_PLAYER, Packets.C_PLAYER_BLOCK_PLACEMENT, Packets.C_PLAYER_DIGGING, Packets.C_ANIMATION, Packets.C_HELD_ITEM_CHANGE, Packets.C_ENTITY_ACTION, Packets.C_USE_ENTITY, Packets.C_CONFIRM_TRANSACTION, Packets.C_KEEP_ALIVE, Packets.C_CLICK_WINDOW, Packets.C_CLIENT_STATUS, Packets.C_CLOSE_WINDOW};

                    if (event.is(Packets.S_RESPAWN)) {
                        this.disabling = true;

                    }

                    if (event.is(Packets.C_USE_ENTITY) && ((C02PacketUseEntity)event.getPacket()).getAction() == C02PacketUseEntity.Action.ATTACK) {
                        this.disabling = false;

                    }

                    if (event.isCanceled()) {
                        return;

                    }

                    if (event.is(clientPackets) && !ModManager.getMod("Scaffold").isToggled()) {
                        if (event.is(Packets.C_CONFIRM_TRANSACTION) && this.disabling && this.getPlayer().ticksExisted < 350) {
                            ((C0FPacketConfirmTransaction)event.getPacket()).setUid(this.getPlayer().ticksExisted % 2 == 0 ? (short)Short.MIN_VALUE : Short.MAX_VALUE);

                        }

                        event.cancelEvent();

                        this.buffer.add(event.getPacket());

                    }

                    if (!event.is(Packets.C_PLAYER) || !this.clock.elapsed(150L) && !ModManager.getMod("Scaffold").isToggled()) return;

                    try {
                        this.buffer.forEach(PacketUtil::sendSilent);

                    } catch (Exception ex) {
                        ChatUtil.printDebug("Packet loss?");

                    }

                    this.buffer.clear();

                    this.clock.reset();

                    return;

                }

                case "stall": {
                    if (event.is(Packets.C_ENTITY_ACTION) && (((C0BPacketEntityAction)event.getPacket()).getAction() == C0BPacketEntityAction.Action.START_SPRINTING || ((C0BPacketEntityAction)event.getPacket()).getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING)) {
                        event.cancelEvent();

                    }

                    if (event.isCanceled()) {
                        return;

                    }

                    if (event.is(Packets.C_PLAYER, Packets.C_PLAYER_BLOCK_PLACEMENT, Packets.C_PLAYER_DIGGING, Packets.C_ANIMATION, Packets.C_HELD_ITEM_CHANGE, Packets.C_ENTITY_ACTION, Packets.C_USE_ENTITY, Packets.C_CONFIRM_TRANSACTION, Packets.C_KEEP_ALIVE)) {
                        event.cancelEvent();

                        this.buffer.add(event.getPacket());

                    }

                    if (!event.is(Packets.C_PLAYER) || !this.clock.elapsed(150L)) return;

                    try {
                        this.buffer.forEach(PacketUtil::sendSilent);

                    } catch (Exception ex) {
                        ChatUtil.printDebug("Packet loss?");

                    }

                    this.buffer.clear();

                    this.clock.reset();

                    return;

                }

                case "partial": {
                    if (event.is(Packets.C_ENTITY_ACTION) && (((C0BPacketEntityAction)event.getPacket()).getAction() == C0BPacketEntityAction.Action.START_SPRINTING || ((C0BPacketEntityAction)event.getPacket()).getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING)) {
                        event.cancelEvent();

                    }

                    if (!event.is(Packets.C_CONFIRM_TRANSACTION)) return;

                    event.cancelEvent();

                    return;

                }

                case "null 2": {
                    if (event.is(Packets.S_RESPAWN)) {
                        this.disabling = true;

                    }

                    if (event.is(Packets.C_USE_ENTITY) && ((C02PacketUseEntity)event.getPacket()).getAction() == C02PacketUseEntity.Action.ATTACK) {
                        this.disabling = false;

                    }

                    if (!event.is(Packets.C_CONFIRM_TRANSACTION) || !this.disabling || this.getPlayer().ticksExisted >= 200) return;

                    PacketUtil.send(new C00PacketKeepAlive(Integer.MAX_VALUE), 2);

                    ((C0FPacketConfirmTransaction)event.getPacket()).setUid(this.getPlayer().ticksExisted % 2 == 0 ? (short)Short.MIN_VALUE : Short.MAX_VALUE);

                    return;

                }

                case "null": {
                    if (event.is(Packets.S_RESPAWN)) {
                        this.disabling = true;

                    }

                    if (event.is(Packets.C_USE_ENTITY) && ((C02PacketUseEntity)event.getPacket()).getAction() == C02PacketUseEntity.Action.ATTACK) {
                        this.disabling = false;

                    }

                    if (!event.is(Packets.C_CONFIRM_TRANSACTION) || !this.disabling || this.getPlayer().ticksExisted >= 350) return;

                    ((C0FPacketConfirmTransaction)event.getPacket()).setUid(this.getPlayer().ticksExisted % 2 == 0 ? (short)Short.MIN_VALUE : Short.MAX_VALUE);

                    return;

                }

                case "latest": {
                    if (!(event.getPacket() instanceof C0FPacketConfirmTransaction) || this.getPlayer().ticksExisted % 500 >= 200) return;

                    ((C0FPacketConfirmTransaction)event.getPacket()).setUid((short)Short.MIN_VALUE);

                    return;

                }

                case "vulcan": {
                    switch (event.getPacket().pType()) {
                        case C_PLAYER: {
                            C03PacketPlayer player = (C03PacketPlayer)event.getPacket();

                            if (!ModManager.getMod("Speed").isToggled() || !player.isMoving()) return;

                            float mathGround = 0.015625f;

                            player.setY((float)Math.round(player.getPositionY() / (double)mathGround) * mathGround);

                            player.setOnGround(true);

                            break block55;

                        }

                        case C_CONFIRM_TRANSACTION: {
                            if (this.mc.thePlayer.ticksExisted >= 120) return;

                            PacketUtil.send(new C00PacketKeepAlive(Integer.MIN_VALUE), 2);

                            ((C0FPacketConfirmTransaction)event.getPacket()).setUid((short)Short.MAX_VALUE);

                        }

                    }

                }

            }

        }

    };

    public VerusDisabler() {
        super("Verus");

    }

    private String mode() {
        return ((Disabler)ModManager.getMod((String)"Disabler")).verusMode.get();

    }

    @Override
    public void onEnable() {
        super.onEnable();

        this.disabling = true;

        this.timedBuffer.clear();

        this.buffer.clear();

        this.clock.reset();

        this.attackTicks = 0;

    }

}
